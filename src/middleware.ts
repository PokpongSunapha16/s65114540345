import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";
import { jwtVerify } from "jose";

const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "your-secret-key");

export async function middleware(req: NextRequest) {
  const token = req.cookies.get("token")?.value;

  if (!token) {
    console.log("üî¥ No token found, redirecting to /signin");
    return NextResponse.redirect(new URL("/signin", req.url));
  }

  try {
    // ‚úÖ Verify Token ‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ `id`
    const { payload } = await jwtVerify(token, SECRET);
    console.log("‚úÖ Decoded Payload:", payload);

    // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `id` ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô `number` ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!payload || typeof payload.id !== "number") {
      console.error("‚ùå Invalid Token: Missing `id`");
      return NextResponse.redirect(new URL("/signin", req.url));
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á `id` ‡πÄ‡∏õ‡πá‡∏ô `string` ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
    const userId: string = String(payload.id);
    const userRole: string = typeof payload.role === "string" ? payload.role : "USER"; // üî• ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô USER

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ `USER` ‡πÄ‡∏Ç‡πâ‡∏≤ `/admin/*`
    const isAdminPage = req.nextUrl.pathname.startsWith("/admin");
    if (isAdminPage && userRole !== "ADMIN") {
      console.error("‚ùå Unauthorized access to admin page");
      return NextResponse.redirect(new URL("/unauthorized", req.url));
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° Header ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô Frontend
    const response = NextResponse.next();
    response.headers.set("x-user-id", userId);
    response.headers.set("x-user-role", userRole);
    response.headers.set("x-user-logged-in", "true");

    return response;
  } catch (err) {
    console.error("‚ùå Invalid Token:", err);
    return NextResponse.redirect(new URL("/signin", req.url));
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° `/admin/:path*` ‡πÉ‡∏ô matcher ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ Middleware ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Admin
export const config = {
  matcher: [
    "/home",
    "/findplayer",
    "/findteam",
    "/team_management",
    "/gethoop",
    "/profile",
    "/upload_gallery",
    "/blog/create",
    "/blog/:slug/report",
    "/blog/:slug/edit",
    "/admin/:path*" // üî• ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  ],
};

"use client";

import { useEffect, useState } from "react";
import { useRouter } from "next/navigation";
import FindTeamPopup from "../components/FindTeamPopup";
import TeamDetailPopup from "../components/TeamDetailPopup";

interface Team {
  id: number;
  name: string;
  description?: string | null;
  team_logo: string | null;
  court: string;
  start_at: string;
  end_at: string;
  type: string;
  district: string;
  privacy: string;
  member_count: number;
}

const formatDate = (dateString: string) => {
  return new Date(dateString).toLocaleDateString("th-TH", {
    year: "numeric",
    month: "2-digit",
    day: "2-digit",
  });
};

const formatTime = (timeString: string) => {
  return new Date(timeString).toLocaleTimeString("th-TH", {
    hour: "2-digit",
    minute: "2-digit",
    hour12: false,
  });
};

const formatTeamType = (type: string) => {
  return type === "THREE_X_THREE" ? "3X3" : "5X5";
};

export default function FindTeamPage() {
  const router = useRouter();
  const [teams, setTeams] = useState<Team[]>([]);
  const [filteredTeams, setFilteredTeams] = useState<Team[]>([]);
  const [selectedDistrict, setSelectedDistrict] = useState<string>("");
  const [searchQuery, setSearchQuery] = useState<string>("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [selectedTeam, setSelectedTeam] = useState<Team | null>(null);
  const [isDetailPopupOpen, setIsDetailPopupOpen] = useState(false);
  const [teamDetail, setTeamDetail] = useState<Team | null>(null);

  const fetchTeams = async (district: string, query: string) => {
    setIsLoading(true);
    try {
      const res = await fetch(`/api/findteam?district=${district}&query=${query}`);
      if (!res.ok) throw new Error("Failed to fetch teams");
      const data = await res.json();
      setTeams(data.teams || []);
      setFilteredTeams(data.teams || []);
    } catch (error) {
      console.error("Error fetching teams:", error);
      setTeams([]);
      setFilteredTeams([]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSearch = () => {
    if (searchQuery.trim() === "") {
      fetchTeams(selectedDistrict, ""); // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡πâ‡∏≤‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ß‡πà‡∏≤‡∏á
    } else {
      fetchTeams(selectedDistrict, searchQuery.trim());
    }
  };
  

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      handleSearch();
    }
  };

  const handleDistrictChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const district = e.target.value;
    setSelectedDistrict(district);
    setSearchQuery("");
    setTeams([]);
    setFilteredTeams([]);

    // ‚úÖ ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠" ‡πÉ‡∏´‡πâ‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ
    if (district === "") {
      setFilteredTeams([]);
    } else {
      fetchTeams(district, "");
    }
  };
  

  const handleOpenPopup = (team: Team) => {
    setSelectedTeam(team);
    setIsPopupOpen(true);
  };

  const handleClosePopup = () => {
    setIsPopupOpen(false);
    setSelectedTeam(null);
  };

  const handleViewTeamDetail = (team: Team) => {
    console.log("üìå Team Detail:", team); // ‚úÖ Debug ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ description ‡∏à‡∏£‡∏¥‡∏á‡πÜ
    setTeamDetail({
      ...team,
      description: team.description || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", // ‚úÖ ‡∏Å‡∏±‡∏ô description ‡πÄ‡∏õ‡πá‡∏ô null
    });
    setIsDetailPopupOpen(true);
  };
  
  
  
  const handleCloseDetailPopup = () => {
    setIsDetailPopupOpen(false); // ‡∏õ‡∏¥‡∏î popup
  };

  return (
    <div className="relative p-6 min-h-screen bg-gray-50">

      <h1 className="text-2xl font-bold text-center mb-6">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏µ‡∏°</h1>

      {/* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ */}
      <div className="flex justify-between items-center bg-black py-2 px-4 rounded-lg shadow-md mb-6 w-2/3 mx-auto">
        <select
          value={selectedDistrict}
          onChange={handleDistrictChange}
          className="px-3 py-2 text-black border border-gray-300 rounded-md focus:ring focus:ring-orange-300 bg-white w-1/4"
        >
          <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠</option>
          <option value="MUEANG">‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ</option>
          <option value="SI_MUEANG_MAI">‡∏®‡∏£‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</option>
          <option value="KHONG_CHIAM">‡πÇ‡∏Ç‡∏á‡πÄ‡∏à‡∏µ‡∏¢‡∏°</option>
          <option value="KHUEANG_NAI">‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô</option>
          <option value="KHEMMARAT">‡πÄ‡∏Ç‡∏°‡∏£‡∏≤‡∏ê</option>
          <option value="DET">‡πÄ‡∏î‡∏ä‡∏≠‡∏∏‡∏î‡∏°</option>
          <option value="NA_CHALUAI">‡∏ô‡∏≤‡∏à‡∏∞‡∏´‡∏•‡∏ß‡∏¢</option>
          <option value="NAM_YUEN">‡∏ô‡πâ‡∏≥‡∏¢‡∏∑‡∏ô</option>
          <option value="BUNTHARIK">‡∏ö‡∏∏‡∏ì‡∏ë‡∏£‡∏¥‡∏Å</option>
          <option value="TRAKAN">‡∏ï‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡∏ä‡∏ú‡∏•</option>
          <option value="KUT_KHAOPUN">‡∏Å‡∏∏‡∏î‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏∏‡πâ‡∏ô</option>
          <option value="MUANG_SAM_SIP">‡∏°‡πà‡∏ß‡∏á‡∏™‡∏≤‡∏°‡∏™‡∏¥‡∏ö</option>
          <option value="WARIN">‡∏ß‡∏≤‡∏£‡∏¥‡∏ô‡∏ä‡∏≥‡∏£‡∏≤‡∏ö</option>
          <option value="PHIBUN">‡∏û‡∏¥‡∏ö‡∏π‡∏•‡∏°‡∏±‡∏á‡∏™‡∏≤‡∏´‡∏≤‡∏£</option>
          <option value="TAN_SUM">‡∏ï‡∏≤‡∏•‡∏™‡∏∏‡∏°</option>
          <option value="PHO_SAI">‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÑ‡∏ó‡∏£</option>
          <option value="SAMRONG">‡∏™‡∏≥‡πÇ‡∏£‡∏á</option>
          <option value="DON_MOT_DAENG">‡∏î‡∏≠‡∏ô‡∏°‡∏î‡πÅ‡∏î‡∏á</option>
          <option value="SIRINDHORN">‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£</option>
          <option value="THUNG_SI_UDOM">‡∏ó‡∏∏‡πà‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏∏‡∏î‡∏°</option>
          <option value="SI_LAK_CHAI">‡∏®‡∏£‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ä‡∏±‡∏¢</option>
          <option value="NAM_KHUN">‡∏ô‡πâ‡∏≥‡∏Ç‡∏∏‡πà‡∏ô</option>
          <option value="LAO_SUEA_KOK">‡πÄ‡∏´‡∏•‡πà‡∏≤‡πÄ‡∏™‡∏∑‡∏≠‡πÇ‡∏Å‡πâ‡∏Å</option>
          <option value="SAWANG_WIRAWONG">‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏µ‡∏£‡∏∞‡∏ß‡∏á‡∏®‡πå</option>
        </select>

        <div className="relative w-2/3"> {/* ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏±‡πâ‡∏ô‡∏•‡∏á */}
          <input
            type="text"
            placeholder="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏° ..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            onKeyDown={handleKeyDown}
            className="px-2 py-1 w-full border border-gray-300 rounded-md focus:ring focus:ring-orange-300"
          />
          <button
            onClick={handleSearch}
            className="absolute right-2 top-1/2 transform -translate-y-1/2 text-white px-3 py-1 rounded-md hover:bg-orange-600"
          >
            üîç
          </button>
        </div>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡∏° */}
      <div className="flex justify-center items-center">
        {isLoading ? (
          <p className="text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
        ) : filteredTeams.length === 0 ? (
          <p className="text-gray-500 text-lg font-bold">
            {selectedDistrict === "" ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤" : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"}
          </p>
        ) : (
          <div className="grid grid-cols-1 gap-4 w-2/3">
            {filteredTeams.map((team) => (
              <div
              key={team.id}
              className="flex items-center p-4 border rounded-lg shadow-md bg-white cursor-pointer hover:bg-gray-100 transition"
              onClick={() => handleOpenPopup(team)}
            >
              <img
                src={team.team_logo || "/default-team.png"}
                alt={team.name}
                className="w-16 h-16 rounded-full mr-4"
              />
              <div className="flex-1">
                <h2 className="font-bold text-lg">{team.name}</h2>
                <p className="text-sm text-gray-500">‡∏™‡∏ô‡∏≤‡∏°: {team.court}</p>
                <p className="text-sm text-gray-500">
                  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {formatDate(team.start_at)} - {formatDate(team.end_at)}
                </p>
                <p className="text-sm text-gray-500">
                  ‡πÄ‡∏ß‡∏•‡∏≤: {formatTime(team.start_at)} - {formatTime(team.end_at)}
                </p>
                <p className="text-sm font-bold mt-1 flex items-center">
                  {team.privacy === "PUBLIC" ? "üåç ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞" : "üîí ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"} 
                  <span className="ml-2 bg-gray-200 text-black px-2 py-1 rounded-md text-l font-bold">
                    {formatTeamType(team.type)}
                  </span>
                </p>
              </div>
              <span className="text-sm font-bold text-gray-600">
                {team.member_count} ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
              </span>
            </div>
            ))}
          </div>
        )}
      </div>

      {/* Popup ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏° */}
{isPopupOpen && selectedTeam && (
  <FindTeamPopup
  team={selectedTeam}
  onClose={handleClosePopup}
  onViewTeam={(team) => handleViewTeamDetail(team)}/>
)}


{isDetailPopupOpen && teamDetail && (
  <TeamDetailPopup
    team={{ ...teamDetail, description: teamDetail.description ?? null }}
    onClose={handleCloseDetailPopup}
  />
)}



    </div>
  );
}

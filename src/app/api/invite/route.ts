import { NextRequest, NextResponse } from "next/server";
import prisma from "@/lib/prisma";
import { jwtVerify } from "jose";
import { cookies } from "next/headers";

const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "your-secret-key");

interface UserPayload {
  id: number;
  email: string;
  exp: number;
}

async function getUserFromToken(req: NextRequest): Promise<UserPayload | null> {
  try {
    const cookieStore = cookies();
    const token = (await cookieStore).get("token")?.value;
    if (!token) return null;

    const { payload } = await jwtVerify(token, SECRET);
    return payload as unknown as UserPayload;
  } catch {
    return null;
  }
}

export async function POST(req: NextRequest) {
  try {
    const user = await getUserFromToken(req);
    if (!user) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const senderId = user.id;
    const { teamId, receiverId } = await req.json();

    console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å Client:", { teamId, receiverId, senderId });

    if (!teamId || !receiverId) {
      console.error("‚ùå Missing required fields:", { teamId, receiverId });
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ sender ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
    const isMember = await prisma.teamMember.findFirst({
      where: { teamId, userId: senderId, status: "APPROVED" },
    });

    if (!isMember) {
      console.error("‚ùå User is not a member of this team:", senderId);
      return NextResponse.json({ error: "You are not a member of this team" }, { status: 403 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ receiver ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const receiverInTeam = await prisma.teamMember.findFirst({
      where: { teamId, userId: receiverId, status: "APPROVED" },
    });

    if (receiverInTeam) {
      console.error("‚ùå Receiver is already in the team:", receiverId);
      return NextResponse.json({ error: "‚ùå ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ó‡∏µ‡∏°‡πÅ‡∏•‡πâ‡∏ß" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingInvite = await prisma.notification.findFirst({
      where: { teamId, senderId, receiverId, type: "TEAM_INVITE" },
    });

    if (existingInvite) {
      console.error("‚ùå Invitation already exists for:", { teamId, senderId, receiverId });
      return NextResponse.json({ error: "Invitation already sent" }, { status: 409 });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
    const newInvite = await prisma.notification.create({
      data: {
        senderId,
        receiverId,
        teamId,
        type: "TEAM_INVITE",
        status: "UNREAD",
        expiresAt: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),
      },
    });

    console.log("‚úÖ Invitation Created:", newInvite);
    return NextResponse.json({ message: "‚úÖ ‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (error) {
    console.error("‚ùå Error sending invite:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

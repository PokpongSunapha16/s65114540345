"use client";

import { useState, useEffect } from "react";
import { Trash } from "lucide-react"; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏ö

interface Comment {
  id: number;
  content: string;
  createdAt: string;
  userId: number;
  author: {
    id: number;
    username: string;
    profile_picture: string | null;
  };
}

export default function CommentSection({ slug, userId }: { slug: string; userId: number | null }) {
  const [comments, setComments] = useState<Comment[]>([]);
  const [newComment, setNewComment] = useState("");
  const [loading, setLoading] = useState(false);

  // üîÑ ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î
  useEffect(() => {
    async function fetchComments() {
      try {
        const res = await fetch(`/api/blog/show/${slug}/comments`);
        const data = await res.json();
        if (res.ok) {
          setComments(data);
        } else {
          console.error("üö® Error fetching comments:", data.error);
        }
      } catch (error) {
        console.error("üö® Error fetching comments:", error);
      }
    }
    fetchComments();
  }, [slug]);

  // ‚úèÔ∏è ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö)
  const handleCommentSubmit = async () => {
    if (!newComment.trim() || loading) return;
    if (!userId) {
      alert("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ");
      return;
    }
    setLoading(true);

    try {
      const res = await fetch(`/api/blog/show/${slug}/comments`, {
        method: "POST",
        body: JSON.stringify({ content: newComment }),
        headers: { "Content-Type": "application/json" },
      });

      const data = await res.json();
      if (res.ok) {
        setComments([data, ...comments]); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        setNewComment("");
      } else {
        console.error("üö® Error posting comment:", data.error);
      }
    } catch (err) {
      console.error("üö® Error posting comment:", err);
    } finally {
      setLoading(false);
    }
  };

  // ‚ùå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
  const handleDeleteComment = async (commentId: number) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ô‡∏µ‡πâ?")) return;

    try {
      const res = await fetch(`/api/blog/show/${slug}/comments/delete/${commentId}`, { method: "DELETE" });
      const data = await res.json();

      if (!res.ok) throw new Error(data.error || "Failed to delete comment");

      setComments(comments.filter((comment) => comment.id !== commentId));
    } catch (err) {
      console.error("üö® Error deleting comment:", err);
    }
  };

  return (
    <div className="mt-6">
      {/* üìù ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö) */}
      {userId ? (
        <div className="flex flex-col space-y-2">
          <input
            type="text"
            placeholder="‚úèÔ∏è ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô..."
            className="w-full p-2 border rounded-lg"
            value={newComment}
            onChange={(e) => setNewComment(e.target.value)}
            disabled={loading}
          />
          <button
            onClick={handleCommentSubmit}
            className="bg-blue-500 text-white p-2 rounded-lg disabled:opacity-50"
            disabled={loading}
          >
            {loading ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á..." : "‡∏™‡πà‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"}
          </button>
        </div>
      ) : (
        <p className="text-red-500 text-center">‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</p>
      )}

      {/* üí¨ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô */}
      {comments.length > 0 ? (
        <div className="mt-4 space-y-4">
          {comments.map((comment) => (
            <div key={comment.id} className="flex items-start space-x-3 p-3 border-b">
              {/* üì∑ ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏π‡πâ‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå */}
              <img
                src={comment.author.profile_picture || "/default-avatar.png"}
                className="w-10 h-10 rounded-full"
                alt={comment.author.username}
              />
              <div className="w-full">
                <div className="flex justify-between items-center">
                  <p className="text-sm font-semibold">{comment.author.username}</p>
                  <p className="text-xs text-gray-400">{new Date(comment.createdAt).toLocaleString()}</p>
                </div>
                <p className="text-gray-700">{comment.content}</p>
              </div>

              {/* ‚ùå ‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå) */}
              {userId !== null && userId === comment.userId && (
                <button onClick={() => handleDeleteComment(comment.id)} className="text-red-500 hover:scale-110">
                  <Trash size={18} />
                </button>
              )}
            </div>
          ))}
        </div>
      ) : (
        <p className="text-gray-500 text-center mt-4">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô</p>
      )}
    </div>
  );
}

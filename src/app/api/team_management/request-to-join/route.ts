import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";

const prisma = new PrismaClient();
const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "your-secret-key");

export async function POST(req: NextRequest) {
  try {
    const token = (await cookies()).get("token")?.value;
    if (!token) {
      return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
    }

    const { payload } = await jwtVerify(token, SECRET);
    const userId = Number(payload.id);
    if (!userId) {
      return NextResponse.json({ error: "Invalid user" }, { status: 403 });
    }

    const { teamName } = await req.json();
    const decodedTeamName = decodeURIComponent(teamName).replace(/-/g, " "); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á "-" ‡πÄ‡∏õ‡πá‡∏ô " "
    
    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    const team = await prisma.team.findFirst({
      where: { name: decodedTeamName },
      select: { id: true, name: true, type: true, member_count: true, privacy: true, created_by: true },
    });

    if (!team) {
      return NextResponse.json({ error: "‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö" }, { status: 404 });
    }

    if (team.privacy !== "PRIVATE") {
      return NextResponse.json({ error: "‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    const maxMembers = team.type === "THREE_X_THREE" ? 3 : 5;
    if (team.member_count >= maxMembers) {
      return NextResponse.json({ error: "‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingMember = await prisma.teamMember.findFirst({
      where: { teamId: team.id, userId },
    });

    if (existingMember) {
      return NextResponse.json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingRequest = await prisma.notification.findFirst({
      where: { teamId: team.id, senderId: userId, type: "TEAM_REQUEST" },
    });

    if (existingRequest) {
      return NextResponse.json({ error: "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" }, { status: 409 });
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°‡πÉ‡∏ô `Notification`
    await prisma.notification.create({
      data: {
        senderId: userId,
        receiverId: team.created_by,
        teamId: team.id,
        type: "TEAM_REQUEST",
        status: "UNREAD",
        message: `üîî ${payload.username} ‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏° ${team.name}`,
      },
    });

    return NextResponse.json({ message: "‚úÖ ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏µ‡∏°‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß" });
  } catch (error) {
    console.error("‚ùå Error requesting to join team:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

import { NextResponse } from "next/server";
import { cookies } from "next/headers";
import { jwtVerify } from "jose"; 
import prisma from "@/lib/prisma";

export async function GET(req: Request, context: any) {
  try {
    const { slug } = context.params;
    if (!slug) {
      return NextResponse.json({ error: "Slug is required" }, { status: 400 });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á JWT Token ‡∏à‡∏≤‡∏Å Cookie
    const token = (await cookies()).get("token")?.value;
    let loggedInUserId: number | null = null;

    if (token) {
      try {
        const secretKey = new TextEncoder().encode("your-secret-key");
        const { payload } = await jwtVerify(token, secretKey);
        loggedInUserId = Number(payload.id); // ‚úÖ ‡πÉ‡∏ä‡πâ `id` ‡∏ï‡∏≤‡∏° JWT Payload
        console.log("‚úÖ Decoded Payload:", payload);
        console.log("‚úÖ User Authenticated:", loggedInUserId);
      } catch (err) {
        console.error("üö® Invalid Token:", err);
      }
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏•‡πá‡∏≠‡∏Å (‡∏£‡∏ß‡∏° `picture` ‡πÅ‡∏•‡∏∞ `author.profile_picture`)
    const blog = await prisma.blog.findUnique({
      where: { slug },
      select: {
        id: true,
        title: true,
        slug: true,
        content: true,
        picture: true, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å
        userId: true,
        createdAt: true,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
        updatedAt: true,  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        author: {
          select: {
            id: true,
            username: true,
            profile_picture: true, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô
          },
        },
      },
    });
    

    if (!blog) {
      return NextResponse.json({ error: "Blog not found" }, { status: 404 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const isOwner = loggedInUserId !== null && blog.userId === loggedInUserId;

    return NextResponse.json({ ...blog, isOwner });
  } catch (error) {
    console.error("üö® Error fetching blog:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}

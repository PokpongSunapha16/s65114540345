import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { cookies } from "next/headers";
import { jwtVerify } from "jose";

const prisma = new PrismaClient();
const SECRET = new TextEncoder().encode(process.env.JWT_SECRET || "your-secret-key");

export async function POST(req: NextRequest, { params }: any) {
  try {
    const cookieStore = cookies();
    const token = (await cookieStore).get("token")?.value;

    if (!token) {
      return NextResponse.json({ error: "Unauthorized: No token provided" }, { status: 401 });
    }

    const { payload } = await jwtVerify(token, SECRET);
    const userId = payload.id as number;

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Team ID ‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°
    const decodedTeamName = decodeURIComponent(params.teamName).replace(/-/g, " ");
    const team = await prisma.team.findFirst({
      where: { name: decodedTeamName },
    });

    if (!team) {
      return NextResponse.json({ error: "Team not found" }, { status: 404 });
    }

    // üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
    const member = await prisma.teamMember.findFirst({
      where: { teamId: team.id, userId: userId },
    });

    if (!member) {
      return NextResponse.json({ error: "You are not a member of this team" }, { status: 403 });
    }

    // üèÄ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
    if (member.role === "PLAYER") {
      // ‚úÖ ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‚Üí ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
      await prisma.teamMember.deleteMany({
        where: { teamId: team.id, userId: userId },
      });

      // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
      const newMemberCount = await prisma.teamMember.count({ where: { teamId: team.id } });
      await prisma.team.update({ where: { id: team.id }, data: { member_count: newMemberCount } });

      return NextResponse.json({ message: "Left the team successfully" });
    }

    // üèÜ ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà
    const teamMembers = await prisma.teamMember.findMany({
      where: { teamId: team.id },
      orderBy: { joined_at: "asc" }, // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    });

    if (teamMembers.length === 1) {
      // üõë ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚Üí ‡∏•‡∏ö‡∏ó‡∏µ‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await prisma.team.delete({ where: { id: team.id } });
      return NextResponse.json({ message: "Team deleted as no members left" });
    }

    // üîÑ ‡πÇ‡∏≠‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏°‡∏≤‡∏ô‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
    const newCaptain = teamMembers.find((m) => m.userId !== userId);

    if (newCaptain) {
      await prisma.teamMember.update({
        where: { id: newCaptain.id },
        data: { role: "CAPTAIN" },
      });
    }

    // ‚úÖ ‡∏•‡∏ö‡∏Å‡∏±‡∏õ‡∏ï‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°
    await prisma.teamMember.delete({ where: { id: member.id } });

    // üîÑ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
    const updatedMemberCount = await prisma.teamMember.count({ where: { teamId: team.id } });
    await prisma.team.update({ where: { id: team.id }, data: { member_count: updatedMemberCount } });

    return NextResponse.json({ message: "Captain role transferred and left the team" });
  } catch (error) {
    console.error("Error leaving team:", error);
    return NextResponse.json({ error: "Failed to leave team" }, { status: 500 });
  } finally {
    await prisma.$disconnect();
  }
}

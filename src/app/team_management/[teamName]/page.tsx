"use client";

import { useEffect, useState } from "react";
import { useRouter, useParams } from "next/navigation";
import { Dialog } from "@headlessui/react";
import LeaveTeamButton from "@/app/components/LeaveTeamButton";

interface TeamDetails {
  name: string;
  team_logo: string | null;
  court: string;
  start_at: string;
  end_at: string;
  type: string;
  district: string;
  privacy: string;
  description: string;
  created_by: number;
  map: string | null;
}

// üîÑ Map ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
const districtMapping: Record<string, string> = {
  "MUEANG": "‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ",
  "SI_MUEANG_MAI": "‡∏®‡∏£‡∏µ‡πÄ‡∏°‡∏∑‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà",
  "KHONG_CHIAM": "‡πÇ‡∏Ç‡∏á‡πÄ‡∏à‡∏µ‡∏¢‡∏°",
  "KHUEANG_NAI": "‡πÄ‡∏Ç‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô",
  "KHEMMARAT": "‡πÄ‡∏Ç‡∏°‡∏£‡∏≤‡∏ê",
  "DET": "‡πÄ‡∏î‡∏ä‡∏≠‡∏∏‡∏î‡∏°",
  "NA_CHALUAI": "‡∏ô‡∏≤‡∏à‡∏∞‡∏´‡∏•‡∏ß‡∏¢",
  "NAM_YUEN": "‡∏ô‡πâ‡∏≥‡∏¢‡∏∑‡∏ô",
  "BUNTHARIK": "‡∏ö‡∏∏‡∏ì‡∏ë‡∏£‡∏¥‡∏Å",
  "TRAKAN": "‡∏ï‡∏£‡∏∞‡∏Å‡∏≤‡∏£‡∏û‡∏∑‡∏ä‡∏ú‡∏•",
  "KUT_KHAOPUN": "‡∏Å‡∏∏‡∏î‡∏Ç‡πâ‡∏≤‡∏ß‡∏õ‡∏∏‡πâ‡∏ô",
  "MUANG_SAM_SIP": "‡∏°‡πà‡∏ß‡∏á‡∏™‡∏≤‡∏°‡∏™‡∏¥‡∏ö",
  "WARIN": "‡∏ß‡∏≤‡∏£‡∏¥‡∏ô‡∏ä‡∏≥‡∏£‡∏≤‡∏ö",
  "PHIBUN": "‡∏û‡∏¥‡∏ö‡∏π‡∏•‡∏°‡∏±‡∏á‡∏™‡∏≤‡∏´‡∏≤‡∏£",
  "TAN_SUM": "‡∏ï‡∏≤‡∏•‡∏™‡∏∏‡∏°",
  "PHO_SAI": "‡πÇ‡∏û‡∏ò‡∏¥‡πå‡πÑ‡∏ó‡∏£",
  "SAMRONG": "‡∏™‡∏≥‡πÇ‡∏£‡∏á",
  "DON_MOT_DAENG": "‡∏î‡∏≠‡∏ô‡∏°‡∏î‡πÅ‡∏î‡∏á",
  "SIRINDHORN": "‡∏™‡∏¥‡∏£‡∏¥‡∏ô‡∏ò‡∏£",
  "THUNG_SI_UDOM": "‡∏ó‡∏∏‡πà‡∏á‡∏®‡∏£‡∏µ‡∏≠‡∏∏‡∏î‡∏°",
  "SI_LAK_CHAI": "‡∏®‡∏£‡∏µ‡∏´‡∏•‡∏±‡∏Å‡∏ä‡∏±‡∏¢",
  "NAM_KHUN": "‡∏ô‡πâ‡∏≥‡∏Ç‡∏∏‡πà‡∏ô",
  "LAO_SUEA_KOK": "‡πÄ‡∏´‡∏•‡πà‡∏≤‡πÄ‡∏™‡∏∑‡∏≠‡πÇ‡∏Å‡πâ‡∏Å",
  "SAWANG_WIRAWONG": "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ß‡∏µ‡∏£‡∏∞‡∏ß‡∏á‡∏®‡πå",
};

export default function TeamDetailPage() {
  const router = useRouter();
  const { teamName } = useParams();
  const [team, setTeam] = useState<TeamDetails | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [isOwner, setIsOwner] = useState<boolean>(false);
  const [isDescriptionOpen, setIsDescriptionOpen] = useState(false);
  const [isMapOpen, setIsMapOpen] = useState(false); // ‚úÖ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á Popup ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const [mapLink, setMapLink] = useState<string>(""); // ‚úÖ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  const [isSaving, setIsSaving] = useState(false); // ‚úÖ State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å

  useEffect(() => {
    const fetchTeam = async () => {
      try {
        if (!teamName || Array.isArray(teamName)) return; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ array
        const decodedTeamName = decodeURIComponent(teamName);
        console.log("Fetching team:", decodedTeamName);
  
        const res = await fetch(`/api/team_management/${encodeURIComponent(decodedTeamName)}`, {
          credentials: "include",
        });
  
        if (!res.ok) throw new Error("Failed to fetch team details");
  
        const data = await res.json();
        console.log("Fetched team data:", data);
        setTeam(data.team);
        setMapLink(data.team.map || ""); // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å Database

        if (data.team.map) {
          setMapLink(data.team.map);
        }
  
        type TeamMember = { userId: number; role: string; status: string };
        const userMembership = data.team.members.find((member: TeamMember) => member.userId === data.currentUser);
  
        if (data.team.created_by === data.currentUser || userMembership?.role === "CAPTAIN") {
          setIsOwner(true);
        }
      } catch (error) {
        console.error("Error fetching team details:", error);
      } finally {
        setIsLoading(false);
      }
    };
  
    fetchTeam();
  }, [teamName]);  

  
  const handleSaveMapLink = async () => {
    try {
      if (!teamName || Array.isArray(teamName)) return; // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ
      setIsSaving(true);
  
      const response = await fetch(`/api/team_management/${encodeURIComponent(teamName)}/map`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ map: mapLink }),
      });
  
      if (!response.ok) throw new Error("Failed to update map link");
  
      alert("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error) {
      console.error("Error updating map link:", error);
      alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î!");
    } finally {
      setIsSaving(false);
    }
  };  
  

  if (isLoading) {
    return <p className="text-center text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>;
  }

  if (!team) {
    return <p className="text-center text-red-500">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°</p>;
  }

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center p-6 relative">

      <div className="w-full max-w-md bg-white rounded-lg shadow-lg p-6 text-center">
        <img
          src={team.team_logo || "/default-team.png"}
          alt={team.name}
          className="w-24 h-24 mx-auto rounded-full"
        />
        <h1 className="text-2xl font-bold mt-4">{team.name}</h1>


        <div className="mt-3 flex flex-col items-center">
  {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏ô‡∏≤‡∏°‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */}
  <p className="text-sm text-gray-500 flex items-center gap-2">
    üìç <span className="text-red-500">{districtMapping[team.district] || team.district}</span>
    <span className="text-green-500">{team.court}</span>
  </p>

  {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÉ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô */}
  <div className="mt-2 flex items-center gap-2">
    <button
      onClick={() => setIsDescriptionOpen(true)}
      className="bg-gray-200 hover:bg-gray-300 px-4 py-1 rounded-md text-sm flex items-center space-x-1"
    >
      üìÑ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    </button>

    <button
          onClick={() => setIsMapOpen(true)}
          className="bg-gray-200 hover:bg-gray-300 px-4 py-1 rounded-md text-sm flex items-center space-x-1"
        >
          üó∫Ô∏è ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
        </button>

    {/* ‚úÖ ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°) */}
    {isOwner && (
      <button
      onClick={() => router.push(`/team_management/${encodeURIComponent(teamName as string)}/edit`)}
      className="bg-gray-200 hover:bg-gray-300 px-4 py-1 rounded-md text-sm flex items-center space-x-1"
    >
        ‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°
      </button>
      )}
    </div>
  </div>


        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ñ‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏õ‡∏∏‡πà‡∏° "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î" */}
        <p className="mt-2 text-gray-600 text-sm">
          üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {new Date(team.start_at).toISOString().split("T")[0]} -{" "}
          {new Date(team.end_at).toISOString().split("T")[0]}
        </p>

        {/* ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡∏∞ ‡πÄ‡∏ß‡∏•‡∏≤ */}
        <div className="mt-2 text-gray-600 text-sm flex justify-center gap-2">
          {team.privacy === "PUBLIC" ? "üåç ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞" : "üîí ‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"} | üïí{" "}
          {new Date(team.start_at).toLocaleTimeString()} -{" "}
          {new Date(team.end_at).toLocaleTimeString()}
        </div>
        
        {/* ‡∏õ‡∏∏‡πà‡∏° ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏° */}
        <LeaveTeamButton>
        </LeaveTeamButton>
        </div>
        

      <div className="mt-6 w-full max-w-md space-y-3">
        <button
        onClick={() => router.push(`/team_management/${encodeURIComponent(teamName as string)}/member`)}
        className="w-full bg-white flex items-center justify-center border-2 border-gray-400 p-4 rounded-lg text-lg font-bold shadow-md">
          üèÄ ‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏µ‡∏°
        </button>

        <button
            className="w-full bg-white flex items-center justify-center border-2 border-gray-400 p-4 rounded-lg text-lg font-bold shadow-md"
            onClick={() => router.push(`/team_management/${teamName}/contact`)} // ‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ contact
        >
            üìû ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠
        </button>


        <button className="w-full bg-white flex items-center justify-center border-2 border-gray-400 p-4 rounded-lg text-lg font-bold shadow-md"
        onClick={() => router.push(`/team_management/${teamName}/comment_board`)}
        >
        üìã ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô
        </button>
      </div>

      {/* Popup ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ó‡∏µ‡∏° */}
      <Dialog open={isDescriptionOpen} onClose={() => setIsDescriptionOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <Dialog.Panel className="w-full max-w-md bg-white p-6 rounded-lg shadow-lg">
            <Dialog.Title className="text-xl font-bold">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡∏°</Dialog.Title>
            <Dialog.Description className="mt-2 text-gray-700">{team.description}</Dialog.Description>
            <button onClick={() => setIsDescriptionOpen(false)} className="mt-4 bg-gray-200 px-4 py-2 rounded-md">
              ‡∏õ‡∏¥‡∏î
            </button>
          </Dialog.Panel>
        </div>
      </Dialog>

      {/* Popup ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà */}
      <Dialog open={isMapOpen} onClose={() => setIsMapOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30 flex items-center justify-center p-4">
          <Dialog.Panel className="w-full max-w-md bg-white p-6 rounded-lg shadow-lg">
            <Dialog.Title className="text-xl font-bold">üó∫Ô∏è ‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà</Dialog.Title>

            <input
              type="text"
              value={mapLink || ""}
              readOnly={!isOwner}
              onChange={(e) => setMapLink(e.target.value)}
              className="w-full p-2 border rounded mt-2"
            />

            <p className="text-gray-500 text-sm mt-1">‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏î‡πâ</p>

            <button
              onClick={() => navigator.clipboard.writeText(mapLink)}
              className="bg-blue-500 text-white px-3 py-1 rounded mt-3"
            >
              üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å
            </button>

            {isOwner && (
              <button
                onClick={handleSaveMapLink}
                className="bg-green-500 text-white px-3 py-1 rounded mt-3 ml-2"
                disabled={isSaving}
              >
                {isSaving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å"}
              </button>
            )}

            <button onClick={() => setIsMapOpen(false)} className="bg-gray-300 px-3 py-1 rounded mt-3 ml-2">
              ‡∏õ‡∏¥‡∏î
            </button>
          </Dialog.Panel>
        </div>
      </Dialog>
    </div>
  );
}

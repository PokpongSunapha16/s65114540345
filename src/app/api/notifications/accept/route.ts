import { NextRequest, NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";

const prisma = new PrismaClient();

export async function POST(req: NextRequest) {
  try {
    const { notificationId, teamId } = await req.json();

    console.log("üì• API Request Data:", { notificationId, teamId });

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ notificationId ‡πÅ‡∏•‡∏∞ teamId ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!notificationId || !teamId) {
      console.error("‚ùå Missing required fields:", { notificationId, teamId });
      return NextResponse.json({ error: "Missing required fields" }, { status: 400 });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Notification ‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°
    const notification = await prisma.notification.findUnique({
      where: { id: notificationId },
      include: { team: true }, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° include ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
    });

    if (!notification) {
      console.error("‚ùå Notification not found for ID:", notificationId);
      return NextResponse.json({ error: "Notification not found" }, { status: 404 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ notification ‡∏°‡∏µ teamId ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!notification.teamId) {
      console.error("‚ùå Notification does not have a valid teamId:", notification);
      return NextResponse.json({ error: "Invalid teamId in notification" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    if (notification.type !== "TEAM_INVITE" && notification.type !== "TEAM_REQUEST") {
      console.error("‚ùå Invalid notification type:", notification.type);
      return NextResponse.json({ error: "Invalid notification type" }, { status: 400 });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingMember = await prisma.teamMember.findFirst({
      where: {
        teamId: teamId,
        userId: notification.type === "TEAM_INVITE" ? notification.receiverId : notification.senderId,
      },
    });

    if (existingMember) {
      console.warn("‚ö†Ô∏è User is already a member of this team:", { teamId, userId: notification.receiverId });
      return NextResponse.json({ error: "User is already a member of this team" }, { status: 400 });
    }

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ Team
    await prisma.teamMember.create({
      data: {
        teamId: teamId,
        userId: notification.type === "TEAM_INVITE" ? notification.receiverId : notification.senderId,
        status: "APPROVED",
        role: "PLAYER",
      },
    });

    console.log("‚úÖ User added to team:", { teamId, userId: notification.receiverId });

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÉ‡∏ô‡∏ó‡∏µ‡∏°
    await prisma.team.update({
      where: { id: teamId },
      data: { member_count: { increment: 1 } },
    });

    console.log("‚úÖ Updated member count for team:", teamId);

    // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Notification ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÄ‡∏ä‡∏¥‡∏ç
    await prisma.notification.delete({ where: { id: notificationId } });

    console.log("‚úÖ Notification deleted:", notificationId);

    return NextResponse.json({ message: "‚úÖ Team invitation/request accepted successfully!" });
  } catch (error) {
    console.error("‚ùå Error accepting invite:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
